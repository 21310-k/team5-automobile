H8S,H8/300 SERIES C/C++ COMPILER (V.6.02.01.000)    5-Feb-2025 18:46:07 PAGE   1

************ SOURCE LISTING ************

      Line Pi 0----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+--
FILE NAME: C:\Users\s4exp\Desktop\R7a_team5\test_merge_v2\Soft2\itask_motor.c
         1     /*****************************************************************************************************************
         2     /*    FILE        : itask_motor.c                                                                                    */
         3     /*    DATE        :Tue, Jan 17, 2012                                                                                */
         4     /*    DESCRIPTION :AGVの走行管理割り込みタスク                                                                    */
         5     /*    CPU TYPE    :H8/3052F                                                                                        */
         6     /****************************************************************************************************************/
         7     #include    "machine.h"                                /* 組込み関数の定義                                        */
         8     #include    "reg3052.h"                                    /* H8/3052Fの内蔵モジュール定義                            */
         9     #include    "agvdef.h"                                    /* 無人搬送車のデバイス定義                                */
        10     #include    "agvvars.h"                                    /* 無人搬送車の共通変数を定義                            */
        11     #include    "def_monitor_printf.h"
        12     #include    "Acc_Table.h"                                /* 加速テーブルの読み出し                                */
        13     /****************************************************************************************************************/
        14     /*    走行モータ制御タスク itask_motor                                                                            */
        15     /****************************************************************************************************************/
        16     /***********************************************************************************************/
        17     /*
        18     この関数では, 
        19     1. モータの回転状態を変化する.
        20     2. モータの状態を制御する.
        21     3. モータの状態をもとに, 加速テーブルとGRA1を用いた, 割り込みするタイミングを変化する.  
        22        つまり, itask_motorが呼び出されるタイミングを変化することでモータの回転はじめを変える. 
        23     */
        24     unsigned char frag_state_motor;
        25     unsigned char frag_motor_state_motor;
        26     
        27     #pragma interrupt itask_motor
        28     void itask_motor(void)
        29     {
        30     
        31         int static pointer = 0;
        32         frag_state_motor = AGV_STATE;
        33         frag_motor_state_motor = MOTOR_STATE;
        34         /*
        35         このタスクが起動されたときに、MOTOR_STATEが「MOTOR_STOP以外の条件」ではモータの励磁出力を順番に出力する
        36         つまり, モータを回転する
        37         */
        38         if (MOTOR_STATE != MOTOR_STOP) {
        39             //return MOTOR_STATE;
        40             bios_step_output();
        41             //printf("モータの状態は%u", MOTOR_STATE);
        42         }
        43         else {
        44             MOTOR_STATE = MOTOR_STOP;
        45         }
        46     
        47     
        48         switch (MOTOR_STATE) {
        49         //モータ停止状態のとき
        50         case MOTOR_STOP:
        51             pointer = 0; /*ポインタ変数を初期化*/
        52             GRA1 = ACC_TABLE[pointer]; /*加速テーブルの先頭の値をGRA1にセットする.*/
        53             MOTOR_STATE = MOTOR_ACC; /*モータの状態を加速状態に遷移する*/
        54             break;
        55     
        56         //モータが加速状態の時
        57         case MOTOR_ACC: {
        58             /*
        59             加速テーブルのポインタを現在の状態からインクリメントする
        60             つまり, 割り込み周期が変わっている. つまり, itask_motorの呼び出す周期が変わる. 
        61             */
        62             
        63             pointer++;
        64             GRA1 = ACC_TABLE[pointer]; 
        65     
        66             /*テーブルポインタが(テーブル数-1)と等しくなったときモータが定速状態になる*/
        67             if (pointer == 400) {
        68                 MOTOR_STATE = MOTOR_CONST;
        69             }
        70             /*加速中にAGV_STOP_WAITあるいはAGV_RUN_ALMになれば減速状態になる*/
        71             if ((AGV_STATE == AGV_STOP_WAIT) || (AGV_STATE == AGV_RUN_ALM)) {
        72                 MOTOR_STATE = MOTOR_BREAK;
        73             }
        74             break;
        75         }
        76     
        77         /*モータが定速状態の時*/
        78         case MOTOR_CONST: {
        79             /*定速中にAGV_STOP_WAITあるいはAGV_RUN_ALMになれば減速状態になる*/
        80             if ((AGV_STATE == AGV_STOP_WAIT) || (AGV_STATE == AGV_RUN_ALM)) {
        81                 MOTOR_STATE = MOTOR_BREAK;
        82             }
        83             break;
        84         }
        85     
        86         /*モータが減速状態の時*/
        87         case MOTOR_BREAK: {
        88             //itask_motorの呼び出す速度を遅くする. 
        89             pointer--; /*ポインタの値をデクリメント*/
        90             GRA1 = ACC_TABLE[pointer]; /*GRA1にテーブルの値をセット*/
        91             /*GRA1の値が999になるとMOTOR_STATEを停止状態にする*/
        92             if (GRA1 == 999) {
        93                 MOTOR_STATE = MOTOR_STOP;
        94                 /*ITUの動作を停止する*/
        95                 TSTR &= ~0x02; 
        96             }
        97             //減速状態のまま走行状態に移行すると加速する
        98             if(AGV_STATE == AGV_RUN){
        99                 MOTOR_STATE = MOTOR_ACC;
       100                 }
       101             
       102             break;
       103         }
       104     
       105         default:
       106             break;
       107         }
       108         //printf("モータの状態は%u", MOTOR_STATE); //テスト用
       109         
       110         //テスト用
       111         
       112             if ((frag_state_motor != AGV_STATE) || (frag_motor_state_motor != MOTOR_STATE)){
       113             printf("AGV_STATE:%d , ", AGV_STATE);
       114             printf("MOTOR_STATE:%d\n" , MOTOR_STATE);
       115             
       116             }
       117         
       118         
       119         
       120         
       121         //ITU1の割り込みフラグをクリア
       122         TSR1 &= ~0x01;
       123     }


H8S,H8/300 SERIES C/C++ COMPILER (V.6.02.01.000)    5-Feb-2025 18:46:07 PAGE   1

******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION(P):                                0x00000120 Byte(s)
CONSTANT SECTION(C):                                0x00000342 Byte(s)
DATA     SECTION(D):                                0x00000002 Byte(s)
BSS      SECTION(B):                                0x00000002 Byte(s)

TOTAL PROGRAM  SECTION: 0x00000120 Byte(s)
TOTAL CONSTANT SECTION: 0x00000342 Byte(s)
TOTAL DATA     SECTION: 0x00000002 Byte(s)
TOTAL BSS      SECTION: 0x00000002 Byte(s)

    TOTAL PROGRAM SIZE: 0x00000466 Byte(s)



** ASSEMBLER/LINKAGE EDITOR LIMITS INFORMATION **

NUMBER OF EXTERNAL REFERENCE  SYMBOLS:        5 
NUMBER OF EXTERNAL DEFINITION SYMBOLS:        4 
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:         26 



**** COMPILE CONDITION INFORMATION ****

COMMAND LINE: -cpu=300HA:20 -object=C:\Users\s4exp\Desktop\R7a_team5\test_merge_v2\Soft2\Debug\itask_motor.obj -debug -list=C:\Users\s4exp\Desktop\R7a_team5\test_merge_v2\Soft2\Debug\itask_motor.lst -show=tab=4 -chgincpath C:\Users\s4exp\Desktop\R7a_team5\test_merge_v2\Soft2\itask_motor.c -lang=c -nologo
CPU         : 300ha:20
